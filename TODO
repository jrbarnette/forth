==== Where we are:
All Forth code now lives under forth/, and gets built (one way or
another) into initdict.c.  This includes the source code built into
the interpreter for interpretation at startup.

QUIT has an implementation in the source text that we interpret at
startup, and a fair amount of the static dictionary is gone.

Short term TODO list
    Need to fix up refill():
      + Define how Forth sets the prompt for readline()
      + When the source is EVALUATE, return FALSE

    main() command-line processing is overly complicated; clean it up.

    Error handling is rotten.  It ought to be not too much trouble
    to report errors with something like this:
        ok 1 2 + dupe cr
        1 2 + dupe cr
              ^^^^
        undefined word
    That means tinkering with the internals of PARSE and REFILL...

    Want to implement INCLUDE-FILE and INCLUDED.  Mostly, that means
    shaking out the details of REFILL.

    Change COMPILE-FILE behavior from "read from terminal input" to
    "read from designated file".  This depends on interpret, which
    depends on PARSE.  PARSE depends implicitly on REFILL, because
    PARSE and REFILL operate on the shared input buffer.

    Once we change COMPILE-FILE as planned and implement INCLUDED,
    then we can get rid of file-order.

    Implement ACCEPT.  And KEY, for good measure

Long-term Goal:
    Eliminate the static dictionary, except possibly for HERE and
    FORTH-WORDLIST.

    Eliminate special primitives relating to dictionary allocation
    and name creation and lookup.

    Turn direct-mode into a kind of assembler, as a proof of concept
    for real assembly.  Probably, build on rawdict to make it so.
    Also, this is likely to be necessary to eliminate the last
    special primitives.

Plan
    Organize C sources so that the .c file names better match the
    .fth file names they feed into.

    Move REFILL and STATE to Forth, in that order.

    Take care of search order stuff.

    Dictionary and lookup primitives have to come last, because,
    well ... it's pretty darn tricky.

==== bootstrap refactoring
Generally, reorganize the C code so that the C source content is
named with the same basic conventions as the Forth sources.

Some ideas for what names apply to what content are outlined in
reference/forth/index.txt.

==== What to do with rawdict:
It used to be able to generate a working bootstrap interpreter.
However, the meta-interpret stuff has probably pretty well busted
that.  So, the code is dead in that sense.

OTOH, the rawdict stuff could be used to build an assembler for
direct-mode Forth.  That, in turn, might set the meta-interpreter on
sounder footing, and allow factoring the code to have machine-code
based primitives with no dependencies on C code.
