Where we are:
    Have source that can compile Forth into direct-mode code in C;
    it generates the content for bootstrap/initdict.c.  The build
    process supports meta interpretation during dictionary building,
    including colon definitions.

Goal:
    Eliminate the static dictionary, except possibly for HERE and
    FORTH-WORDLIST.

Plan
    Re-implementation needs to happen mostly from the top down:
    Suppose X and Y are C primitives, that X depends on the static
    dictionary, and Y depends on X.  Then we have to re-implement Y
    first, then X, so that Y doesn't have to call Forth code from C.

    So, we have to re-implement QUIT in Forth before much of
    anything else, because QUIT depends on _everything_ that uses
    the static dictionary.

    Once QUIT is done, we can hook in Forth implementations for the following:
        Parse
        Miscellaneous bits like STATE and BASE
    ... basically, anything that relies on the static dictionary.

    Dictionary stuff has to come last, because it's, well, pretty darn
    tricky.
====
Clean-up

Maybe move INTERPRET-NAME, INTERPRET-UNKNOWN, and INTERPRET-NUMBER
from meta-compile to target.  The relationships amongst these bits
needs a good looking at.

====
Refactoring between rawdict and direct:
    duplication of c-value printing - c-string, c-hex, c-decimal
    want to share things like .{ and },
    want to share >>> and similar
    better separation of content from namespace.fth
    sort out vocabulary contents
    want to share all the primitive definition code
        even though behavior can be quite different
====
bootstrap refactoring

Create a vm.c, and move low-level set-up stuff there from forth.c.
... Tricky, because the idioms around quit() are so screwy.
... But we need to clean up, so that we can move QUIT to forth.

Want to re-organize into the following files
    vm.c
        init_forth(), and initialization from command line
        primitives for stack clearing
        EXIT
        EXECUTE
        CATCH
        THROW
        direct interpretation loop
        indirect interpretation loop
        direct-mode primitives
    TBD
        BASE
        DECIMAL
        HEX
        BL
        TRUE
        FALSE
        STATE
        [
        ]
        compile-special stuff like POSTPONE, [CHAR], etc.
    parse.c
        PARSE
        ...
    compile.c
        ...
    interpret.c
        ABORT
        ABORT"
        QUIT
        EVALUATE
        ...
