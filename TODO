Where we are:
    Have source that can compile Forth into direct-mode code in C;
    it generates the content for bootstrap/initdict.c.  The build
    process supports meta interpretation during dictionary building,
    including colon definitions.

Current goals:
    Convert selected content in bootstrap/stdforth.fth into
    definitions in their proper places under target/core.

    See if we can eliminate selected static data from the
    dictionary.

    Re-implement some compilation primitives like IF, ELSE, and THEN
    in Forth.

====
Clean-up

Need meta POSTPONE; then we can move key parts of control.fth into
target/core.

Want to close down uses of direct-emit to restrict it to direct.fth.
That means tinkering with the factoring around literal handling.

Maybe move INTERPRET-NAME, INTERPRET-UNKNOWN, and INTERPRET-NUMBER
from meta-compile to target.  The relationships amongst these bits
needs a good looking at.

====
Refactoring between rawdict and direct:
    duplication of c-value printing - c-string, c-hex, c-decimal
    want to share things like .{ and },
    want to share >>> and similar
    better separation of content from namespace.fth
    sort out vocabulary contents
    want to share all the primitive definition code
        even though behavior can be quite different
