==== Where we are:
    Have source that can compile Forth into direct-mode code in C;
    it generates the content for bootstrap/initdict.c.  The build
    process supports meta interpretation during dictionary building,
    including colon definitions.

    The current implementation of QUIT is in bootstrap/stdforth.fth.
    However, when the interpreter starts up, it's running a text
    interpreter from quit() in C code.  You have to explicitly invoke
    QUIT to get the Forth version.  The two versions are supposed to
    be the same, but that assertion is not well tested.

BUG
    If you invoke QUIT at the terminal, then EOF (^D) doesn't terminate,
    it hands control back to quit().  So, you have to use EOF twice to
    terminate.

Long-term Goal:
    Eliminate the static dictionary, except possibly for HERE and
    FORTH-WORDLIST.

Plan
    Rip out the C based quit().  Generally, clean up main() to be
    less complicated.

    The C-based quit() is the last dependency on the static dictionary,
    so once it's gone, we can convert the final C dependencies:
        Parse
        Miscellaneous bits like STATE and BASE

    Dictionary stuff has to come last, because, well ... it's pretty
    darn tricky.

==== bootstrap refactoring
Generally, reorganize the C code so that the C source content is
named with the same basic conventions as the Forth sources.

Some ideas for what names apply to what content are outlined in
reference/forth/index.txt.

==== What to do with rawdict:
It used to be able to generate a working bootstrap interpreter.
However, the meta-interpret stuff has probably pretty well busted
that.  So, the code is dead in that sense.

OTOH, the rawdict stuff could be used to build an assembler for
direct-mode Forth.  That, in turn, might set the meta-interpreter on
sounder footing, and allow factoring the code to have machine-code
based primitives with no dependencies on C code.
