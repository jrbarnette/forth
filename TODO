==== Thoughts on proceeding
Main goal is to remove/simplify the meta_interpret()/meta_compile()
approach to things.  My first thought was to increase the capabilities
of direct mode interpretation by using the rawdict approach to build up
content in a buffer before flushing it.  That might be the way to go:
For instance, it's not hard take the current rawdict output and combine
it with direct code that performs the needed copy and then
meta-interprets the rest of the dictionary into existence.

However if we combine the meta-interpret stuff with rawdict stuff, we'll
get even more vocabularies for building up the dictionary, and I'd kind
of like to have fewer.  So...  Maybe just go straight to rawdict, with
small stubs of direct stuff sufficient to
 1) Copy the dictionary into place.
 2) Invoke a small amount of indirect code to finish initialization, and
    then
 3) Invoke QUIT.

Rawdict requires its own new interpreter loop, though.  So, it would be
nice to refactor some pieces to allow more sharing between direct and
rawdict.  For that matter, sharing with QUIT, INCLUDE-FILE, and EVALUATE
would be nice.

==== Where we are:
All Forth code now lives under forth/, and gets built (one way or
another) into initdict.c.  This includes the source code built into
the interpreter for interpretation at startup.

QUIT has an implementation in the source text that we interpret at
startup, and the static dictionary is gone, except for HERE and
FORTH-WORDLIST. So, at this point, everything that might plausibly
be in Forth in the target dictionary is now in Forth.  The only C
code left to eliminate is the stuff used for direct mode and
meta-interpretation during dictionary construction at startup.

There's a sample of how replace things like i_startname in
bootstrap/direct_test.c.  For that to work, we need control flow
support in DIRECT.  That means we need to resurrect/appropriate the
rawdict code for DIRECT.

Short term TODO list
    Error handling is dodgy.  Errors get flagged by printing the last
    source line, with a ^^^ indicator for the token at the failure.
    But, that goes to stdout.  Then, the exception is raised, and the
    exception message goes to stderr.

    We are ready to get rid of file-order, by using INCLUDE-FILE and
    other code to load directly from source.

Long-term Goal:
    Eliminate special C primitives relating to name creation and
    lookup.  These duplicate Forth code.

    Turn direct-mode into a kind of assembler, as a proof of concept
    for real assembly.  Probably, build on rawdict to make it so.
    Also, this is likely to be necessary to eliminate the last
    special primitives.

Plan
    Organize C sources so that the .c file names better match the
    .fth file names they feed into.

    Take care of search order stuff.

    Dictionary and lookup primitives have to come last, because,
    well ... it's pretty darn tricky.

==== bootstrap refactoring
Generally, reorganize the C code so that the C source content is
named with the same basic conventions as the Forth sources.

Some ideas for what names apply to what content are outlined in
reference/forth/index.txt.
