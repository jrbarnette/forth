==== Where we are:
All Forth code now lives under forth/, and gets built (one way or
another) into initdict.c.  This includes the source code built into
the interpreter for interpretation at startup.

QUIT has an implementation in the source text that we interpret at
startup.

BUG
    If you invoke QUIT at the terminal, then EOF (^D) doesn't
    terminate, it hands control back to C-based quit().  So, you
    have to use EOF twice to terminate.

Short term TODO list
    Need to fix refill() to be on firmer footing:  Define the
    interface between Forth code and C code around this, especially
    around initialization of DICT.input.  Probably, focus just on
    correctly handling QUIT and EVALUATE for now.

    main() commandline processing is the last piece that needs
    C-based quit() and interpret().  Figure out how to get those to
    call Forth code instead.

    Error handling is rotten.  It ought to be not too much trouble
    to report errors with something like this:
        ok 1 2 + dupe cr
        1 2 + dupe cr
              ^^^^
        undefined word
    That means tinkering with the internals of PARSE and REFILL...

    Want to implement INCLUDE-FILE and INCLUDED.  Mostly, that means
    shaking out the details of REFILL.

    Change COMPILE-FILE behavior from "read from terminal input" to
    "read from designated file".

    Once we change COMPILE-FILE as planned and implement INCLUDED,
    then we can get rid of file-order.

Long-term Goal:
    Eliminate the static dictionary, except possibly for HERE and
    FORTH-WORDLIST.

Plan
    The C-based quit() is the root dependency on the static
    dictionary, so once it's gone, we can convert the other C
    dependencies piecemeal:
        Parse
        Miscellaneous bits like STATE and BASE

    Dictionary stuff has to come last, because, well ... it's pretty
    darn tricky.

==== bootstrap refactoring
Generally, reorganize the C code so that the C source content is
named with the same basic conventions as the Forth sources.

Some ideas for what names apply to what content are outlined in
reference/forth/index.txt.

==== What to do with rawdict:
It used to be able to generate a working bootstrap interpreter.
However, the meta-interpret stuff has probably pretty well busted
that.  So, the code is dead in that sense.

OTOH, the rawdict stuff could be used to build an assembler for
direct-mode Forth.  That, in turn, might set the meta-interpreter on
sounder footing, and allow factoring the code to have machine-code
based primitives with no dependencies on C code.
