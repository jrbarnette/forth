==== Where we are:
The bootstrap Forth dictionary is built through the following
process:
  * Forth code reads through the Forth sources using a special
    interpretation loop.  The output is direct-threaded code in an
    array named init_dictionary.
  * After completing the direct-threaded code output, the build
    runs through more source code, emitting each source line as a
    C string in an array of strings named init_forth_defs.

The output of the two steps above is written into initdict.c.  At
startup time the interpreter executes the direct-threaded code in
init_dictionary.  Then it interprets each source line in
init_forth_defs.  Then it passes control to the C quit() function.

There's a Forth implementation of QUIT here:
    forth/common/internal/stdforth.fth
However, when the interpreter starts up, it's running the text
interpreter from quit() in C code.  You have to explicitly invoke
QUIT to get the Forth version.  There are some differences between
them; especially relating to ANS2012 number syntax.  There may also
be differences I don't know about...

BUG
    If you invoke QUIT at the terminal, then EOF (^D) doesn't terminate,
    it hands control back to quit().  So, you have to use EOF twice to
    terminate.

Long-term Goal:
    Eliminate the static dictionary, except possibly for HERE and
    FORTH-WORDLIST.

Plan
    Rip out the C based quit().  Generally, clean up main() to be
    less complicated.

    The C-based quit() is the last dependency on the static dictionary,
    so once it's gone, we can convert the final C dependencies:
        Parse
        Miscellaneous bits like STATE and BASE

    Dictionary stuff has to come last, because, well ... it's pretty
    darn tricky.

==== bootstrap refactoring
Generally, reorganize the C code so that the C source content is
named with the same basic conventions as the Forth sources.

Some ideas for what names apply to what content are outlined in
reference/forth/index.txt.

==== What to do with rawdict:
It used to be able to generate a working bootstrap interpreter.
However, the meta-interpret stuff has probably pretty well busted
that.  So, the code is dead in that sense.

OTOH, the rawdict stuff could be used to build an assembler for
direct-mode Forth.  That, in turn, might set the meta-interpreter on
sounder footing, and allow factoring the code to have machine-code
based primitives with no dependencies on C code.
