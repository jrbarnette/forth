typedef union code_cell *		vmip_ft;
typedef union parameter_cell		vmarg_ft;
typedef struct definition *		xt_ft;

#define DEFINER(hdlr, arg) 	\
    vmip_ft hdlr(vmip_ft ip, vmstate_ft *vm, vmarg_ft *arg)

#define PRIM_HDLR(hdlr)		DEFINER(hdlr, ignore)

typedef PRIM_HDLR((*vmhdlr_fn));

union code_cell {
    // contents of cells in a colon-definition
    xt_ft		xtok;		// standard entry
    cell_ft		cell;		// after DO-LITERAL, etc.
    snumber_ft		offset;		// after DO-SKIP, etc.
    char_ft		cdata[CELL_SIZE / CHAR_SIZE];	// DO-C"
    addr_unit_ft	data[CELL_SIZE];		// DO-S"

    // contents of cells in vmcode arrays (e.g. initialize_forth)
    vmhdlr_fn		handler;
    vmip_ft		ip;
    char *		id;
};

union parameter_cell {
    // contents of parameter fields of well known definitions
    cell_ft		cell;			// CONSTANT
    vmip_ft		ip;			// CREATE
    addr_unit_ft	data[CELL_SIZE];	// CREATE
    vminstr_ft		vminstrs[1];		// :
};

struct definition {
    vmhdlr_fn		handler;
    vmarg_ft		param[1];
};

// ----------------------

#include "ftypes.h"
#include "xtoken.h"

typedef union code_cell *	vmcodeptr_ft;
typedef union code_cell {
    forth_handler_fn	handler;
    cell_ft		value;
    vmcodeptr_ft	code;
    char *		id;
} vmcode_ft;

#define N(n)		{ .value = (cell_ft)(n) },
#define X(ref)		{ .code = (ref) },
#define H(fn)		{ .handler = fname },

// specific to initdict.c
#define ID(str)		{ .id = str },
#define MX(n)		{ .xtok = &meta_definitions[(n)] },

// define EXIT
// define DO_LITERAL

#define L(n)			X(DO_LITERAL) N(n)

#define PRIM(nm, hdlr)		vmcode_ft nm[] = { H(hdlr) }
#define CODE(nm)		vmcode_ft nm[] = { H(do_colon)
#define END_CODE		X(EXIT) }
#define CODE_DECL(nm)		extern vmcode_ft nm[]
#define CODE_XT(nm)		((xt_ft) &(nm)[0].handler)

/* possible, if needed
#define CONSTANT(nm, val)	vmcode_ft nm[] = { H(hdlr) N(val) }
#define VARIABLE(nm)		vmcode_ft nm[] = { H(hdlr) N(0) }
*/

#define FARGS_LEN	7

struct fargs {
    cell_ft depth;
    cell_ft stack[FARGS_LEN];
};

extern int forth_execute(struct fargs *args, vmcodeptr_ft xt);
