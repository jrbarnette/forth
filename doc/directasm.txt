In C:

PRIM_HDLR(i_call)
{
    CHECK_RPUSH(vm, 1);
    RPUSH(vm, ip + 1);
    return ip->ip;
}


// S" for a null-terminated C string
// Runtime: ( -- c-addr u )
PRIM_HDLR(i_str)
{
    CHECK_PUSH(vm, 2);
    PUSH(ip->id);
    PUSH(strlen(ip->id));
    return ip + 1;
}


// COUNT for a null-terminated C string
// ( c-addr -- c-addr u )
PRIM_HDLR(i_strlen)
{
    CHECK_POP(vm, 1);
    CHECK_PUSH(vm, 1);
    size_t len = strlen(PICK(SP(vm), 0));
    PUSH(len);
    return ip;
}


#define X(fn)			{ .handler = fn },
#define N(n)			{ .cell = (n) },
#define S(s)			{ .id = s },
#define A(p)			{ .addr = (p) },
#define O(o)			{ .offset = (o) },
#define CHARS(s)		{ .cdata = s },
#define IP(expr)		{ .ip = (expr) },

#define L(x)			X(do_literal) N(x)
#define ADDR(expr)		X(do_literal) A(expr)
#define REF(expr)		X(do_literal) IP(expr)
#define MCP(hdlr)		X(do_literal) X(hdlr)
#define STR(s)			X(i_str) S(s)
// #define STR(s)		X(do_s_quote) N(sizeof (s)) CHARS(s)
#define CALL(expr)		X(i_call) IP(expr)
#define B(o)			X(do_skip) O(o)
#define B0(o)			X(do_fskip) O(o)

// meta-interpretation - we want to eliminate these
#define ID(s)			S(s)
#define PRIM(id, handler)	X(i_addname) ID(id) X(handler)
#define COLON(id)		X(i_startname) ID(id) X(do_colon)
#define LINKNAME()		X(i_linkname)
#define SETFLAGS(n)		X(i_setflags) N(n)
#define LOOKUP(id)		X(i_lookup) ID(id)
#define METAINTERP()		X(meta_interpret)
#define METACOMPILE()		X(meta_compile)
#define METAEND()		ID(NULL)

Cell types in Forth:
    { .cell = <n> },
	<n>: @ .c-hex
    { .cell = (cell_ft) (<expr>) },
	<expr>: @ count type
	<expr>: @ swap type
    { .handler = <hdlrname> },
	<hdlrname>: @ count type
	<hdlrname>: @ swap type
    { .str = <str>|NULL },
	<str>|NULL: @ ?dup if count .c-string else ." NULL" then
	<str>: @ swap .c-string
    { .offset = <offset> },
	<offset>: @ .c-decimal
    { .cdata = <str> },
	<str>: 1 cells .c-string
    { .ip = &direct_dictionary[<offset>] },
	<offset>: @ .c-decimal
    { .addr = &dictionary.data_space[<offset>] },
	<offset>: target-buff - .c-decimal
	<offset>: @ .c-decimal

    formatting a cell
	.start-instr { .field ."  = " .content }, .end-instr

Building the target dictionary is implemented with two languages
(or, modes of operation):
  * Interpretation - Words are interpreted by the standard Forth
    interpreter extended with a vocabulary that supports adding
    cells to the direct dictionary buffer.
  * Compilation - Words are compiled into the direct dictionary
    buffer.

Implementation
    \ The only vocabulary visible in direct compilation mode.
    vocabulary DIRECT-COMPILE

    \ Visible in interpretation, and when defining content in
    \ DIRECT-COMPILE.
    vocabulary DIRECT 

    \ Invoke this to enter direct interpretation mode
    : DIRECT-MODE only FORTH also DIRECT-INTERPRET ;

    \ Say this to add definitions to direct interpretation mode
    DIRECT-MODE definitions

    \ Invoke this to enter direct compilation mode
    : ] only DIRECT-COMPILE ;

    \ To add content to DIRECT-COMPILE:
    DIRECT-MODE also DIRECT-COMPILE definitions previous

    \ To return to direct interpretation from direct compilation
    : [ DIRECT-MODE ;

Direct interpretation vocabulary content
    HERE ALLOT ALIGN , C, UNUSED
	Shadow the standard Forth names.  Operate on the direct
	dictionary buffer.

    (miscellaneous utilities)
	Code to tag cells in the direct dictionary buffer.

    prim: <name> <hdlr>
	Add <name> to DIRECT-COMPILE with the semantics
	    X(<hdlr>)

    : <name>
	Shadows the standard Forth name.  Add <name> to
	DIRECT-COMPILE with the semantics
	    CALL(<offset>)
	Where <offset> is the current value of HERE for the direct
	dictionary buffer.  Change to direct compilation mode.

    VARIABLE <name>
	Allocate a cell in the direct dictionary buffer.  Add <name>
	to DIRECT-COMPILE with the semantics
	    ADDR(&direct_dictionary[<offset>])
	Where <offset> is the offset of the assigned cell in the
	direct dictionary buffer.

	Add <name> to DIRECT with the semantics
	    <addr> CONSTANT <name>
	Where <addr> is the address of the assigned cell in the
	dictionary buffer, and CONSTANT is taken from the FORTH
	vocabulary.

    ( <n> ) CONSTANT <name>
	Add <name> to DIRECT-COMPILE with the semantics
	    L(<n>)

	Add <name> to DIRECT with the semantics
	    ( <n> ) CONSTANT <name>
	(CONSTANT taken from FORTH).

Direct compilation vocabulary content
    IF ELSE THEN BEGIN WHILE UNTIL REPEAT
	as for standard forth, but compiling branches needs to change
    DO ?DO LEAVE I J +LOOP LOOP UNLOOP
	as for standard forth, but look at uses of POSTPONE
	possibly omit?
