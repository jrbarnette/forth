union instruction_cell {
    /* general purpose VM instructions */
    xt_ft		xtok;
    cell_ft		cell;
    snumber_ft		offset;
    char_ft		cdata[CELL_SIZE / CHAR_SIZE];
    addr_unit_ft	data[CELL_SIZE];

    /* direct execution only */
    vmhdlr_fn		handler;
    vmip_ft		ip;
    char *		id;
};

valid output forms:

META-BUILDER
    { .handler = /* primitive name */ },

    { .handler = do_constant }, { .cell = /* number */ },

    { .handler = do_variable }, { .cell = 0 },

    { .handler = do_colon },
	/* definition entries */

	{ .ip = &meta_definitios[/* index */] },

	{ .ip = &meta_definitios[/* do-literal */] },
	    { .cell = (cell_ft) (/* expr */) },

	{ .ip = &meta_definitios[/* do-literal */] },
	    { .cell = /* number */ },

	{ .ip = &meta_definitios[/* do-literal */] },
	    { .handler = /* name */ },

	{ .ip = &meta_definitios[/* ?branch */] },
	    { .cell = /* number */ },

	{ .ip = &meta_definitions[/* branch */] },
	    { .cell = /* number */ },


BUILDER code
    { .ip = META_INITIALIZE },

    { .ip = META_INTERPRET },
	{ .cell = /* ref# */ }, // 1 or more times
	{ .cell = 0x0 },

    { .ip = META_COMPILE },
	{ .cell = /* ref# */ }, // 1 or more times
	{ .cell = 0x0 },

    { .ip = META_STARTNAME },
	{ .id = /* counted */ }, { .handler = /* name */ },

    { .ip = META_ADDNAME },
	{ .id = /* counted */ }, { .handler = /* name */ },

    { .ip = META_LINKNAME },
    { .ip = META_SETFLAGS }, { .cell = /* flags */ },
    { .ip = META_REFERENCE }, { .cell = /* ref# */ },

    { .ip = DO_LITERAL },
	{ .cell = /* number */ },

    { .ip = DO_LITERAL },
	{ .cell = (cell_ft) (/* expr */) },

    { .ip = DO_LITERAL },
	{ .handler = /* name */ },

    { .ip = meta_literal },	// later

    { .ip = EXIT },


Meta-builder compile:
    For compiling meta-interpret/meta-compile, etc.

    Default compilation semantics:
	{ .ip = &meta_definitions[/* index */] },

    Number:
	{ .ip = &meta_definitions[/* do-literal */] },
	    { .cell = /* number */ },

    Branch:
	{ .ip = &meta_definitions[/* skip xt */] },
	    { .cell = /* number */ },

    Colon definition:
	{ .handler = do_colon },
	    /* entries */
	    { .ip = &meta_definitions[/* exit */] },


TARGET source code forms:
    <name>			( interpretation semantics )
	{ .ip = META_INTERPRET },	// if not already in META_INTERPRET
	    { .cell = /* name index */ },

    <name>			( default compilation )
	{ .ip = META_COMPILE },		// if not already in META_COMPILE
	    { .cell = /* name index */ },

    : <name>			( interpretation state )
	{ .ip = META_STARTNAME },
	    { .id = /* name */ }, { .handler = do_colon },

    CONSTANT <name>		( interpretation state )
	{ .ip = META_ADDNAME },
	    { .id = /* name */ }, { .handler = do_constant },

    VARIABLE <name>		( interpretation state )
	{ .ip = META_ADDNAME },
	    { .id = /* name */ }, { .handler = do_variable },

    PRIM: <name> <handler>	( interpretation state )
	{ .ip = META_ADDNAME },
	    { .id = /* name */ }, { .handler = /* handler */ },

    POSTPONE <name>		( default semantics )
	{ .ip = META_REFERENCE }, { .cell = /* name index */ },
	{ .ip = META_INTERPRET },
	    { .cell = /* LITERAL index */ },
	    { .cell = 0x0 },
	{ .ip = META_COMPILE },
	    { .cell = /* COMPILE, index */ },

    POSTPONE <name>		( non-default semantics )
	{ .ip = META_COMPILE },
	    { .cell = /* name index */ },

    [COMPILE] <name>		( compilation state )
	{ .ip = META_COMPILE },
	    { .cell = /* name index */ },

    ['] <name>			( compilation state )
	{ .ip = META_REFERENCE }, { .cell = /* name index */ },
	{ .ip = META_INTERPRET },
	    { .cell = /* LITERAL index */ },

    [CHAR] <char>		( compilation state )
	{ .ip = DO_LITERAL }, { .cell = /* char */ },
	{ .ip = META_INTERPRET },
	    { .cell = /* LITERAL index */ },

    ;				( compilation state )
	    { .cell = /* EXIT index */ },
	    { .cell = 0x0 },
	{ .ip = META_LINKNAME },

    IMMEDIATE COMPILE-ONLY	( interpretation state )
	{ .ip = META_SETFLAGS }, { .cell = /* flags */ },

    <number>			( interpretation state )
	{ .ip = DO_LITERAL }, { .cell = /* number */ },

    <number>			( compilation state )
	{ .ip = DO_LITERAL }, { .cell = /* number */ },
	{ .ip = META_INTERPRET },
	    { .cell = /* LITERAL index */ },

    <C> <C expression>		( interpretation state )
	{ .ip = DO_LITERAL }, { .cell = /* C expression */ },

    <C> <C expression>		( compilation state )
	{ .ip = DO_LITERAL }, { .cell = /* C expression */ },
	{ .ip = META_INTERPRET },
	    { .cell = /* LITERAL index */ },

    handler: <handler>		( compilation state )
	{ .ip = DO_LITERAL }, { .cell = /* handler */ },
	{ .ip = META_INTERPRET },
	    { .cell = /* LITERAL index */ },
