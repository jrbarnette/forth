typedef union code_cell *vmcodeptr_ft;

typedef union code_cell {
    vmhdlr_fn		handler;
    cell_ft		cell;
    vmcodeptr_ft	ip;
    char *		id;
} vmcode_ft;

valid output forms:

METADICT-TARGET code
    { .handler = /* primitive name */ },

    { .handler = do_constant }, { .cell = /* number */ },

    { .handler = do_variable }, { .cell = 0 },

    { .handler = do_colon },
	/* definition entries */

	{ .ip = &meta_definitios[/* index */] },

	{ .ip = &meta_definitios[/* do-literal */] },
	    { .cell = (cell_ft) (/* expr */) },

	{ .ip = &meta_definitios[/* do-literal */] },
	    { .cell = /* number */ },

	{ .ip = &meta_definitios[/* do-literal */] },
	    { .handler = /* name */ },

	{ .ip = &meta_definitios[/* ?branch */] },
	    { .cell = /* number */ },

	{ .ip = &meta_definitions[/* branch */] },
	    { .cell = /* number */ },


BUILDER-TARGET code
    { .ip = META_INITIALIZE },

    { .ip = META_INTERPRET },
	{ .cell = /* ref# */ }, // 1 or more times
	{ .cell = 0x0 },

    { .ip = META_COMPILE },
	{ .cell = /* ref# */ }, // 1 or more times
	{ .cell = 0x0 },

    { .ip = META_STARTNAME },
	{ .id = /* string */ }, { .handler = /* primitive name */ },

    { .ip = META_ADDNAME },
	{ .id = /* string */ }, { .handler = /* primitive name */ },

    { .ip = META_LINKNAME },
    { .ip = META_SETFLAGS }, { .cell = /* flags */ },
    { .ip = META_REFERENCE }, { .cell = /* ref# */ },

    { .ip = DO_LITERAL },
	{ .cell = /* number */ },

    { .ip = DO_LITERAL },
	{ .cell = (cell_ft) (/* expr */) },

    { .ip = DO_LITERAL },
	{ .handler = /* primitive name */ },

    { .ip = COMMA },

    { .ip = EXIT },


compilation transform rules:

Meta-builder compile:
    For compiling meta-interpret/meta-compile, etc.

    Default compilation semantics:
	{ .ip = &meta_definitions[/* index */] },

    Number:
	{ .ip = &meta_definitions[/* do-literal */] },
	    { .cell = /* number */ },

    Branch:
	{ .ip = &meta_definitions[/* skip xt */] },
	    { .cell = /* number */ },

    Colon definition:
	{ .handler = do_colon },
	    /* entries */
	    { .ip = &meta_definitions[/* exit */] },


BUILDER source code forms:
    PRIM: <name> <handler>	( interpretation state )
	{ .ip = META_ADDNAME },
	    { .id = "<name>" }, { .handler = <handler> },

    : <name>			( interpretation state )
	{ .ip = META_STARTNAME },
	    { .id = "<name>" }, { .handler = do_colon },

    ;				( compilation state )
	{ .ip = META_COMPILE },
	    { .cell = /* EXIT ref# */ },
	    { .cell = 0x0 },
	{ .ip = META_LINKNAME },

    CONSTANT <name>		( interpretation state )
	{ .ip = META_ADDNAME },
	    { .id = "<name>" }, { .handler = do_constant },

    VARIABLE <name>		( interpretation state )
	{ .ip = META_ADDNAME },
	    { .id = "<name>" }, { .handler = do_variable },

    <name>			( interpretation semantics )
	{ .ip = META_INTERPRET },
	    { .cell = /* <name> ref# */ },

    <name>			( default compilation )
	{ .ip = META_COMPILE },	
	    { .cell = /* <name> ref# */ },

    POSTPONE <name>		( default semantics )
	{ .ip = META_REFERENCE }, { .cell = /* <name> ref# */ },
	compile builder literal
	{ .ip = META_COMPILE },
	    { .cell = /* COMPILE, ref# */ },

    POSTPONE <name>		( non-default semantics )
	{ .ip = META_COMPILE },
	    { .cell = /* <name> ref# */ },

    [COMPILE] <name>		( compilation state )
	{ .ip = META_COMPILE },
	    { .cell = /* <name> ref# */ },

    ['] <name>			( compilation state )
	{ .ip = META_REFERENCE }, { .cell = /* <name> ref# */ },
	compile builder literal

    [CHAR] <char>		( compilation state )
	{ .ip = DO_LITERAL }, { .cell = /* char */ },
	compile builder literal

    IMMEDIATE COMPILE-ONLY	( interpretation state )
	{ .ip = META_SETFLAGS }, { .cell = /* flags */ },

    <number>			( interpretation state )
	{ .ip = DO_LITERAL }, { .cell = <number> },

    <number>			( compilation state )
	( as for interpretation state)
	compile builder literal

    <C> <C expression>;		( interpretation state )
	{ .ip = DO_LITERAL }, { .cell = /* C expression */ },

    <C> <C expression>;		( compilation state )
	( as for interpretation state)
	compile builder literal

    handler: <handler>		( compilation state )
	{ .ip = DO_LITERAL }, { .handler = <handler> },
	compile builder literal

    compiler builder literal:
    (option A)
	{ .ip = META_INTERPRET },
	    { .cell = /* LITERAL ref# */ },
    (option B)
	{ .ip = META_COMPILE },
	    { .cell = /* DO-LITERAL ref# */ },
	    { .cell = 0x0 },
	{ .ip = COMMA },
