# Introduction:
Following standard Forth terminology, the _metacompiler_ is a program
that builds a Forth interpreter from scratch using a language that looks
like Forth (but typically isn't quite Forth).

## Basic terminology
`VM`: Native machine code written in C or assembly implementing the
    Forth primitives and interpreter loop.
`Metacompiler`: Forth code that produces the dictionary initialization
    code.
`Host`: The Forth VM running the metacompiler.
`Target`: The Forth VM running the builder.
`Meta-dictionary`:  Headerless dictionary with definitions for use by
    the builder.  Found in the vmcode_ft code array named
    `meta_dictionary` in [bootstrap/initdict.c](bootstrap/initdict.c).
`Builder`: Executable code to initialize the dictionary in the target.
    Found in the vmcode_ft code array named `initialize_forth` in
    [bootstrap/initdict.c](bootstrap/initdict.c).

## Structure of metacompiler output
The output of the metacompiler is C code statements initializing global
data that can be interpreted by the VM; that is, it's Forth definitions.
The code, when executed by the VM, will build the initial Forth
dictionary in the target.

The output consists of three parts:
 1) The meta-dictionary
 2) The builder
 3) Forth source text in an array of strings to be interpreted by
    EVALUATE.

## Structure of metacompiler source
Input sources are processed in one of three modes:
  * Definitions for the implementation of some aspect of
    metacompilation.
  * Definitions being compiled into the meta-dictionary.
  * Definitions being compiled into the builder.

## Metacompiler vocabularies
METACOMPILER
    Basic metacompiler code shared between the meta-dictionary and the
    builder.

METADICT-HOST
    Utilities used to build up the code for compiling the
    meta-dictionary.  Contains stuff meant to be invoked from code in
    METADIC-TARGET that's specific to the meta-dictionary, especially
    stuff that conflicts (or might conflict) with names in BUILDER, such
    as:
	INTERPRET and constituents
	COMPILE-FILE:
	' (redefined to search META-TARGET only
	local helpers, see meta-target.fth

METADICT-TARGET
    Definitions corresponding to target code in the meta-dictionary.
    This should be (nearly) everything that can be mentioned in
    meta-dictionary sources, and nothing else.

    Generally, each definition in this vocabulary has a location and
    content in the meta-dictionary, and can in turn be invoked by
    other code in the meta-dictionary or builder.  Specifically,
    everything needed to implement the builder primitives:
	meta-initialize
	do-literal
	linkname
	meta-startname
	meta-addname
	meta-setflags
	meta-interpret
	meta-compile
	meta-reference
    Some of the content is immediate words that are used to compile
    other target code (especially LITERAL and control flow primitives).

METADICT-DEFINERS
    Meta-dictionary compilation support for creating definitions in
    METADICT-TARGET.  These need to be available when in interpretation
    state in meta-compiler source. At minimum, these:
	PRIM:
	:
	CONSTANT
	VARIABLE
	]

METADICT-SPECIAL
    Meta-dictionary compiler special definitions that operate on names
    in the METADICT-TARGET.  Currently these:
	POSTPONE
	[COMPILE]
	[']

## Modes:
Creating definitions for METACOMPILER.

Creating definitions to be used for meta-dictionary compilation:
  * Ordinary definitions into METADICT-HOST
  * Definitions into METADICT-HOST using POSTPONE et al. from
    METADICT-SPECIAL
  * Definitions into METADICT-TARGET; always uses METADICT-SPECIAL

Compiling meta-dictionary code.  Will produce compilation output.
