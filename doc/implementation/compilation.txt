==== Dictionary layout
    link
    count+flags char, name char*len
    definition data

For the convenience of FIND, there should always be an "immediate"
flag (is this true?).  The "compile-only" flag is optional.

Semantics are specified by a combination of flags and definition
data.

Known behavior configurations in definition data:
    default ->
    interpret: execute
    compile: append execution semantics
    execute: found in definition

    immediate ->
    interpret: execute
    compile: execute
    execute: found in definition

    interpretation not allowed ->
    interpret: undefined; -14 THROW is allowed
    compile: append execution semantics
    execute: found in definition

    special compilation ->
    interpret: undefined; -14 THROW is allowed
    compile: found in definition
    execute: inaccessible to a standard program

    like [ ->
    interpret: undefined; -14 THROW is allowed
    compile: append execution semantics
    execute: found in definition

    like TO ->
    interpret: custom interpretation; maybe state-smart
    compile: custom compilation; maybe state-smart
    execute: inaccessible to a standard program

    like S" ->
    interpret: custom interpretation; maybe state-smart
    compile: custom compilation; maybe state-smart
    execute: omitted from standard

==== Current definition data
    handler, data ...

QUIT behavior
    ( def-data flags )
    STATE @ IF
        IMMEDIATE? IF EXECUTE ELSE COMPILE, THEN
    ELSE
        COMPILE-ONLY? IF -14 THROW ELSE EXECUTE THEN
    THEN

POSTPONE behavior
    ( def-data flags )
    IMMEDIATE? 0= IF [COMPILE] LITERAL ['] COMPILE, THEN COMPILE,

[COMPILE] behavior
    ( def-data flags )
    DROP COMPILE,

FIND returns pointer to definition data
EXECUTE -> primitive
COMPILE, -> ,

==== Hack option
    Use current layout

Use a flag bit to indicate "state-smart" words.  The bit is only
meaningful if the word is also immediate.

QUIT behavior
    ( def-data flags )
    STATE @ IF
        IMMEDIATE? IF EXECUTE ELSE COMPILE, THEN
    ELSE
        DROP EXECUTE
    THEN

Define the following:
    VARIABLE POSTPONE-STATE
    : BEGIN-POSTPONE STATE @ POSTPONE-STATE ! -1 STATE ! ;
    : END-POSTPONE POSTPONE-STATE @ STATE ! ;
    : [ 0 STATE ! 0 POSTPONE-STATE ! ; IMMEDIATE
    : ] -1 STATE ! -1 POSTPONE-STATE ! ;

Then, POSTPONE would do the following:
    ( def-data flags )
    DUP IMMEDIATE? IF
        STATE-SMART? IF
            ['] BEGIN-POSTPONE COMPILE, COMPILE, ['] END-POSTPONE
        THEN
    ELSE
        DROP [COMPILE] LITERAL ['] COMPILE,
    THEN COMPILE,

[COMPILE] behavior (relies on "state-smart" implying "immediate")
    ( def-data flags )
    STATE-SMART? IF
        ['] BEGIN-POSTPONE COMPILE, COMPILE, ['] END-POSTPONE
    THEN COMPILE,

==== Option A
    interpret xt
    compile xt
    handler, data ...
No "compile-only" flag

QUIT behavior
    ( def-data )
    DUP 2 CELLS + SWAP STATE @ CELLS - @ EXECUTE

FIND returns pointer to handler, data...
EXECUTE -> primitive
COMPILE, -> ,

Possible configurations for "compile xt" and "interpret xt".

standard definition
    compile -> COMPILE,
    interpret -> EXECUTE

immediate definition
    compile -> EXECUTE
    interpret -> EXECUTE

no-interpret definition
    compile -> COMPILE,
    interpret -> -14 THROW

compile-only definition
    compile -> EXECUTE
    interpret -> -14 THROW

constant definition
    compile -> EXECUTE POSTPONE LITERAL
    interpret -> EXECUTE

variable definition
    compile -> EXECUTE POSTPONE LITERAL
    interpret -> EXECUTE

==== Option B
    compile xt
    handler, data ...

QUIT behavior
    ( def-data compile-only? )
    STATE @ IF
        DROP DUP CELL+ SWAP @
    ELSE
        IF -14 THROW ELSE CELL+ THEN
    THEN EXECUTE

FIND returns pointer to handler, data...
EXECUTE -> primitive
COMPILE, -> ,

==== Option C
    do_create
    compile xt
    handler, data ...

QUIT behavior
    ( def-data compile-only? )
    STATE @ IF DROP ELSE COMPILE-ONLY? IF -14 THROW ELSE >BODY THEN EXECUTE

FIND returns depends on STATE
    ( def-data )
    STATE @ 0= IF >BODY THEN
EXECUTE -> primitive
COMPILE, -> >BODY ,

==== Option D
...
But then we lose the ability to customize.  One interesting customization
would be that we could implement CREATE to get rid of a separate
DOES> pointer.

First, change QUIT behavior to be this:
    DUP CELL+ SWAP STATE @ CELLS - @ EXECUTE

So, both interpret and compile XTs would see the interpret pointer
at TOS.  That implies the following behavior configurations:

standard definition
    compile -> CELL+ COMPILE,
    interpret -> CELL+ EXECUTE

immediate definition
    compile -> CELL+ EXECUTE
    interpret -> CELL+ EXECUTE

no-interpret definition
    compile -> CELL+ COMPILE,
    interpret -> -14 THROW

compile-only definition
    compile -> CELL+ EXECUTE
    interpret -> -14 THROW

CONSTANT definition
    compile -> CELL+ @ POSTPONE LITERAL
    ... or -> DUP @ EXECUTE POSTPONE LITERAL
    interpret -> CELL+ @

VARIABLE definition
    compile -> CELL+ POSTPONE LITERAL
    ... or -> DUP @ EXECUTE POSTPONE LITERAL
    interpret -> CELL+

CREATE definition:
    compile -> CELL+ POSTPONE LITERAL @ COMPILE,
    interpret -> CELL+ SWAP @ EXECUTE

CREATE IMMEDIATE definition:
    compile -> CELL+ SWAP @ EXECUTE
    interpret -> CELL+ SWAP @ EXECUTE

We could create a magic xt for CONSTANT and VARIABLE such that
COMPILE, would skip it (e.g. a well-known NOP xt).  A well-known
NOP would also be useful to allow CHARS to compile to nothing.
Then CONSTANT and VARIABLE would be the famous
    : CONSTANT CREATE , DOES> @ ;
    : VARIABLE CREATE 0 , ;

----
It could be that the xt returned by ' et al. should be the
pointer to the (interpret, compile) pair in the definition.
Then we'd to have COMPILE, and EXECUTE be special.  (How?)
