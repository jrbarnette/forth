---- Backend (generation) state
Two options for generation.

1) meta_interpret and meta_compile
    state is local at build time

2) meta_interpret only
    meta-compile vs. meta-interpret distinguished by STATE in the target

We're going with option 1 for now.


option 1 - emit states are direct, interpret, and compile

transition table:
old | new | emit
 D  |  I  | { .handler = meta_interpret },
 D  |  C  | { .handler = meta_compile },
 I  |  D  | { .id = NULL },
 I  |  C  | { .id = NULL }, { .handler = meta_compile },
 C  |  D  | { .id = NULL },
 C  |  I  | { .id = NULL }, { .handler = meta_interpret },


option 2 - emit states are direct/interpret, direct/compile,
interpret, and compile

allowed transitions
old | new | emit
D/I |  I  | { .handler = meta_interpret },
D/I |  C  | { .handler = meta_interpret }, { .id = "]" },
D/C |  I  | { .handler = meta_interpret }, { .id = "[" },
D/C |  C  | { .handler = meta_interpret },
 I  | D/I | { .id = NULL },
 I  |  C  | { .id = "]" },
 C  | D/C | { .id = NULL },
 C  |  I  | { .id = "[" },

---- Meta-interpreter building blocks (as source code)
ONLY FORTH DEFINITIONS
variable offset
variable meta-state
variable emit-state

: .offset ( n -- ) ." /* " offset @ 3 .r ."  */ " spaces ;
: { ." { " ;
: }{ ."  }, { " 1 offset +! ;
: } ."  }," cr 1 offset +! ;
: emit-state!
    dup emit-state @ <> if
	emit-state @ if 4 .offset { ." .id = NULL" } then
	dup if
	    dup 1- if s" meta_compile" else s" meta_interpret" then
	    1 .offset { .exec }
	then
    then emit-state !
;
: direct-emit ( -- ) 0 emit-state! 0 .offset ;
: meta-emit ( name len -- ) emit-state! 4 .offset { .str } ;
: meta-interpret ( name len -- ) 1 meta-emit ;
: meta-compile ( name len -- ) 2 meta-emit ;
: meta-literal meta-state @ 2 = if s" LITERAL" meta-interpret then ;

vocabulary TARGET
vocabulary DIRECT
vocabulary META
----  Frontend (custom interpreter loop) state
: INTERPRET-NUMBER ( x -- | x )
    direct-emit { s" do_literal" .exec }{ c-hex .cell } meta-literal
;

: INTERPRET-NAME ( i*x xt flags -- j*x ) drop execute ;

: INTERPRET-UNKNOWN ( str len -- )
    meta-state @ if
	meta-state @ meta-emit
    else
	type space -13 throw
    then
;
---- Front-end vocabularies
TARGET vocabulary contents
    IMMEDIATE NO-INTERPRET COMPILE-ONLY
	emit direct code to set flags on last definition
	if immediate flag is set, create a META vocabulary entry
	    maybe make this a separate operation
	    : META-IMMEDIATE
		get-current also target definitions
		>in @ create >in !
		previous set-current
                parse-name dup , here swap chars dup allot move
		does> dup cell+ swap @ meta-interpret ;
    META-IMMEDIATE words created as described above:
	+LOOP BEGIN DO DOES> ELSE IF LITERAL LOOP REPEAT THEN UNTIL
	WHILE RECURSE ?DO AGAIN CASE ENDCASE ENDOF OF
    \ comment text
    ( comment text )
    .( compile time message )
    [ - enter meta-interpret mode
	change meta-state to meta-interpret
        change search order to exclude DIRECT vocabulary
    ] - enter meta-compile mode
	change meta-state to meta-compile
        change search order to exclude DIRECT vocabulary
    <DIRECT> - enter direct mode
	changes source interpreter behavior only
	change meta-state to direct
        change search order to include DIRECT vocabulary
    <HOST> - enter host mode
        in general, disable non-standard behaviors
        (... but behaviors above don't respect standard STATE...)
    : - start a :-definition and switch to meta-compile mode
    ; - end a meta-: definition; return to meta-interpret mode
    CONSTANT - emit direct code to create a constant definition
    VARIABLE - emit direct code to create a variable definition
    CREATE - emit direct code to create a create definition (TBD)
    PRIM: - emit direct code to create a forth primitive definition
    >>> - emit raw C source code
    <C> ...; - emit direct code for a literal from a C expression
	direct-emit { s" do_literal" .exec }{ [char] ; parse .cell }
	    meta-literal
    [CHAR]
	: [CHAR] char meta-literal ;
    [COMPILE] - escape a word defined with META-IMMEDIATE
        \ direct-emit { s" i_compile" .exec }{ parse-name .str }
        : [COMPILE] parse-name meta-compile ;
    POSTPONE - (maybe don't provide)
    parsing words - special, probably don't provide
	." ABORT" S" ['] C" TO
DIRECT vocabulary contents
    forth primitives that emit no-operand handlers, e.g.
	+ -> { s" x_plus" .exec }
	(includes dictionary, stackprim, arithprim, and memprim)

Direct instructions
    (all no operand forth primitives) - use standard forth name
    do_literal, .cell
        invoke from LITERAL
        invoke from interpret loop for number in input
    i_setflags, .cell
        invoke from IMMEDIATE, NO-INTERPRET, COMPILE-ONLY
    i_addname, .id, .handler
        invoke from CONSTANT, VARIABLE (and CREATE?)
    i_startname, .id, .handler
        invoke from :
    i_linkname
        invoke from ;
    i_compile, .id
        invoke from [COMPILE], POSTPONE
        should be replaced with meta_compile
---- Code generation examples
To execute code in meta interpretation state:
    { .handler = meta_interpret },
	{ .id = "..." }, ...
	{ .id = NULL },

To compile tokens into the dictionary:
    { .handler = meta_compile },
	{ .id = "..." }, ...
	{ .id = NULL },

-1 constant TRUE
    { .handler = do_literal }, { .cell = -1 },
    { .handler = i_addname }, { .id = "TRUE" }, { .handler = do_constant },
    { .handler = i_linkname },

: CHARS ;
    { .handler = i_addname }, { .id = "CHARS" }, { .handler = do_colon },
    { .handler = meta_compile },
	{ .id = "EXIT" },
	{ .id = NULL },
    { .handler = i_linkname },

: CELLS <C> CELL_SIZE; * ;
    { .handler = i_addname }, { .id = "CELLS" }, { .handler = do_colon },
    { .handler = do_literal }, { .cell = CELL_SIZE },
    { .handler = meta_interpret },
	{ .id = "LITERAL" },
	{ .id = NULL },
    { .handler = meta_compile },
	{ .id = "*" },
	{ .id = "EXIT" },
	{ .id = NULL },
    { .handler = i_linkname },

handling for IMMEDIATE words
: >BODY ( xt -- a-addr ) [ 2 cells ] literal + ;
    // at start frontend doesn't matter, generation is direct
    // : >BODY - gen direct
    { .handler = i_addname }, { .id = ">BODY" }, { .handler = do_colon },
    // : triggers meta-compile
    // [ triggers meta-interpret
    // 2 interpreter gen direct
    { .handler = do_literal }, { .cell = 2 },
    // CELLS gen direct->interpret
    { .handler = meta_interpret },
	{ .id = "CELLS" },
	// ] triggers meta-compile
	// LITERAL immediate gen interpret
	{ .id = "LITERAL" },
        // + gen interpret->compile
	{ .id = NULL },
    { .handler = meta_compile },
	{ .id = "+" },
        // ; gen compile
	{ .id = "EXIT" },
        // ; gen direct
	{ .id = NULL },
    { .handler = i_linkname },
    // ; triggers meta-interpret
    // at end frontend is meta-interpret, generation is direct

handling for POSTPONE
: [CHAR] char postpone literal ; compile-only
    { .handler = i_addname }, { .id = "[CHAR]" }, { .handler = do_colon },
    { .handler = meta_compile },
	{ .id = "CHAR" },
	// POSTPONE emits LITERAL in meta-compile
	{ .id = "LITERAL" },
	{ .id = "EXIT" },
	{ .id = NULL },
    { .handler = i_linkname },
    { .handler = meta_interpret },
	{ .id = "COMPILE-ONLY" },
	{ .id = NULL },

====  Other thoughts
number literals:
    direct:
	// literal
	{ .handler = do_literal }, { .cell = <number value> },
    interpret:  wrap direct-mode semantics
	// <DIRECT>
	    { .id = NULL },
	// literal
	{ .handler = do_literal }, { .cell = <number value> },
	// [
	// this will be triggered at next generation action
	{ .handler = meta_interpret },
    compile:
	// <DIRECT> literal
	    { .id = NULL },
	{ .handler = do_literal }, { .cell = <number value> },
	// ] LITERAL
	{ .handler = meta_interpret },
	    { .id = "LITERAL" },
	// this will be triggered at next generation action
	    { .id = NULL },
	{ .handler = meta_compile },

primitives - default semantics:
    definition:
	// prim: <Forth name> <C handler>
	{ .handler = i_addname },
	    { .id = <Forth name> }, { .handler = <C handler> },
    direct:
	{ .handler = <handler> },
    interpret:
	// [
	{ .id = <Forth name> },
    compile:
	// ]
	{ .id = <Forth name> },
    postpone:
	// <DIRECT>
	    { .id = NULL },
	{ .handler = i_lookup }, { .id = <Forth name> },
	// ] LITERAL
	{ .handler = meta_interpret },
	    { .id = "LITERAL" },
	    { .id = NULL },
	{ .handler = meta_compile },
	    { .id = "," },	// really "COMPILE,"
    implementation:
      + DIRECT vocabulary implements direct semantics
      + META vocabulary has a word created with something like this:
	    : meta-def
		here create name>id here 2 cells allot 2!
		does> { 2@ .str } ;
      + COMPILE-INPUT keeps track of meta-state so that meta
	interpretation and compilation are distinguished.


definitions with "no-interpret" semantics:
    definition:
	// ... definition
	{ .handler = i_setflags }, { .cell = 0x40 },
    direct:      error
    interpret:   error
    implementation:
      + DIRECT vocabulary has no such words
      + META vocabulary flags indicate usage

immediate definitions semantics:
    definition:
	// ... definition
	{ .handler = i_setflags }, { .cell = 0x80 },
    compile:
	// [
	    { .id = NULL },
	{ .handler = meta_interpret },
	    { .id = <Forth name> },
	// ]
	    { .id = NULL },
	{ .handler = meta_compile },
    postpone:
	// in meta-compile mode
	    { .id = <Forth name> },
    implementation:
      + Compile and interpret behaviors are intrinsic to the compilation
	interpreter
      + POSTPONE executes this:
	    2 meta-state ! EXECUTE

IMMEDIATE             6.1.1710 CORE                   40
COMPILE-ONLY          (non-standard)
    direct:
	// IMMEDIATE
	{ .handler = i_setflags }, { .cell = 0x80 },
	// COMPILE-ONLY
	{ .handler = i_setflags }, { .cell = 0x40 },
    interpret:   wrap direct mode semantics
    implementation:
      + Put these words in the HOST vocabulary

any definition that calls PARSE:
    definition:  may be re-implemented for direct mode
    direct:      error if not re-implemented for this mode
    interpret:   wrap direct-mode semantics
    compile:    default compilation semantics
    implementation:
      + Put re-implementation (if any) in the HOST vocabulary
      + Compilation handling TBD

certain definitions like ]:
    direct:     custom non-error handling
    interpret:  custom non-error handling
    compile:    default compilation semantics
    implementation:
      + Put in the HOST vocabulary
      + Compilation handling TBD

CONSTANT              6.1.0950 CORE                   35
    definition:
	// <calculate value>
	// CONSTANT <Forth name>
	// Option A) for right now
	{ .handler = i_addname },
	    { .id = <Forth name> }, { .handler = do_constant },
	{ .handler = x_comma },
	// Option B) consider for later
	// <DIRECT>
	{ .handler = i_addname },
	    { .id = <Forth name> }, { .handler = do_constant },
	// [ ,
	{ .handler = meta_interpret },
	    { .id = "," },
    direct:
	{ .handler = do_literal }, { .cell = <value from definition> },
    implementation:
      + Put option A) in the HOST vocabulary.  Create the name in the
	META vocabulary with meta-def (from above).
      + Don't allow definining/using constants in direct mode for now.
	(Or else, force dual definition?)

VARIABLE              6.1.2410 CORE                   48
    definition:
	// VARIABLE <Forth name>
	// Option A) for right now
	{ .handler = i_addname },
	    { .id = <Forth name> }, { .handler = do_variable },
	    { .cell = 0 },
	// Option B) available in meta-interpret mode
	// <DIRECT>
	{ .handler = i_addname },
	    { .id = <Forth name> }, { .handler = do_variable },
	// [ 1 cells allot
	{ .handler = do_literal }, { .cell = 1 },
	{ .handler = meta_interpret },
	    { .id = "CELLS" },
	    { .id = "ALLOT" },
    direct:     error
    implementation:
      + Put option A) in the HOST vocabulary.
      + Create the name in the META vocabulary with meta-def (from
	above).

CREATE                6.1.1000 CORE                   36
    definition:  default semantics for definitions that call PARSE

:                     6.1.0450 CORE                   30
    definition:
	// : <Forth name>
	{ .handler = i_startname },
	    { .id = <Forth name> }, { .handler = do_colon },
	// ]
	// this may be triggered at next generation action
	{ .handler = meta_compile },
    direct:     error
    implementation:
      + Put this in the HOST vocabulary.
      + Create the name in the META vocabulary with meta-def (from
	above).

;                     6.1.0460 CORE                   30
    direct:     error
    interpret:  error
    compile:
	// POSTPONE EXIT
	    { .id = "EXIT" },
	// [
	// this will be triggered at next generation action
	    { .id = NULL },
	{ .handler = i_linkname },
	// this may be triggered at next generation action
	{ .handler = meta_interpret },
    implementation:
      + Put this in the META vocabulary as an immediate,
	compile-only word.

]                     6.1.2540 CORE                   49
    direct:     switch to meta-compile mode
    interpret:  switch to meta-compile mode
    compile:    default semantics, i.e.
	{ .id = "]" },
    implementation:
      + TBD

[                     6.1.2500 CORE                   48
    direct:     switch to meta-interpret mode
    interpret:  switch to meta-interpret mode (no-op)
    compile:    switch to meta-interpret mode
    implementation:
      + Put this in the HOST vocabulary as an immediate word.
      + POSTPONE handling TBD


BASE                  6.1.0750 CORE                   34
    must execute with something like <HOST> BASE

DECIMAL               6.1.1170 CORE                   36
HEX                   6.2.1660 CORE EXT               54
    direct:     can execute host semantics
    implementation:
      + Create an alias in the DIRECT vocabulary

(                     6.1.0080 CORE                   26
.(                    6.2.0200 CORE EXT               49
\                     6.2.2535 CORE EXT               58
    direct:     execute host semantics
    interpret:  execute host semantics
    compile:    execute host semantics
    postpone:   compile target semantics
    implementation:
      + TBD - same problem as [ and ] and parsing words

'                     6.1.0070 CORE                   25
CHAR                  6.1.0895 CORE                   35
    implementation:
      + these call PARSE; don't re-implement (for now)

POSTPONE              6.1.2033 CORE                   43
    direct:     error
    interpret:  error
    compile:    wrap custom direct mode code
    postpone:   error
    implementation:
      + Put this in the META vocabulary as an immediate,
	compile-only word.

."                    6.1.0190 CORE                   28
S"                    6.1.2165 CORE                   44
[']                   6.1.2510 CORE                   50
[CHAR]                6.1.2520 CORE                   50
[COMPILE]             6.2.2530 CORE EXT               60
    direct:     error
    interpret:  error
    compile:    wrap custom direct mode code
    postpone    compile target semantics
    implementation:
      + Put this in the META vocabulary as an immediate,
	compile-only word.
      + POSTPONE TBD

(can omit these)
:NONAME               6.2.0455 CORE EXT               52
MARKER                6.2.1850 CORE EXT               56
TO                    6.2.2295 CORE EXT               59
VALUE                 6.2.2405 CORE EXT               60

parsing words:
    : CONSTANT CREATE VARIABLE
    MARKER TO VALUE
    ' CHAR
    POSTPONE S" ['] [CHAR] [COMPILE]

compilation-special words:
    ( .( \
    [ ] ;
    LITERAL
    S" ['] [CHAR]
    POSTPONE [COMPILE]
    ."
    IF ELSE THEN
    BEGIN WHILE REPEAT UNTIL AGAIN
    DO I J LEAVE UNLOOP LOOP +LOOP
    DOES>

host words:
    BASE HEX DECIMAL

====
'                     6.1.0070 CORE                   25
(                     6.1.0080 CORE                   26
."                    6.1.0190 CORE                   28
:                     6.1.0450 CORE                   30
;                     6.1.0460 CORE                   30
BASE                  6.1.0750 CORE                   34
CHAR                  6.1.0895 CORE                   35
CONSTANT              6.1.0950 CORE                   35
CREATE                6.1.1000 CORE                   36
DECIMAL               6.1.1170 CORE                   36
IMMEDIATE             6.1.1710 CORE                   40
POSTPONE              6.1.2033 CORE                   43
S"                    6.1.2165 CORE                   44
VARIABLE              6.1.2410 CORE                   48
[                     6.1.2500 CORE                   48
[']                   6.1.2510 CORE                   50
[CHAR]                6.1.2520 CORE                   50
]                     6.1.2540 CORE                   49
.(                    6.2.0200 CORE EXT               49
:NONAME               6.2.0455 CORE EXT               52
HEX                   6.2.1660 CORE EXT               54
MARKER                6.2.1850 CORE EXT               56
TO                    6.2.2295 CORE EXT               59
VALUE                 6.2.2405 CORE EXT               60
[COMPILE]             6.2.2530 CORE EXT               60
\                     6.2.2535 CORE EXT               58
COMPILE-ONLY          (non-standard)
