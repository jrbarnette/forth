immediate word:  a Forth word whose compilation semantics are to
    perform its execution semantics.
default interpretation semantics are execution semantics
default compilation semantics are to append execution semantics
some words have no interpretation semantics
    it is only valid to append the execution semantics
some words have no execution semantics
    special compilation words have only compilation semantics
    certain words have both interpretation and special compilation semantics

I = action by INTERPRET when STATE is 0
C = action by INTERPRET when STATE is -1
P = action performed by POSTPONE
[] = action performed by [COMPILE]
'X = semantics found by '

Various kinds of definition semantics:
		| I  | C  | P  | [] | 'X |
default		| X  | AX | AC | AX | X  |
no-interpret	| U  | AX | AC | AX | U  |
immediate	| X  | X  | AX | AX | X  |
special		| U  | S  | AS | AS | U  |
like [		| U  | X  | AX | AX | U  |
like TO		| SI | S  | P  | E  | E  |
like S"		| SI | S  | AS | AS | ?? |

X - EXECUTE
S - perform special compilation semantics
SI - perform special interpretation semantics
U - undefined; ambiguous condition; -14 THROW
P - bad POSTPONE; -48 THROW
E - ambiguous condition, no standard exception code
AX - append execution semantics; COMPILE,
AC - append semantics that append execution semantics
AS - append the special compilation semantics
?? - no specified behavior; no matching ambiguous condition
    possibly should be SI

(*) [ is immediate, but has undefined interpretation semantics
(*) TO has no execution semantics:
    POSTPONE, [COMPILE], ', and ['] are explicitly disallowed
(*) S" has no execution semantics:
    POSTPONE, [COMPILE], ', and ['] aren't disallowed

name flags
    NOINTERP	Error when interpreting
    IMMEDIATE	Execute when compiling

name format 1:
    hdlr, data ...

format 1 interpretation action based on flags:
 S | I | N | action
 I | * | F | EXECUTE
 I | * | T | -14 THROW
 C | F | * | COMPILE,
 C | T | * | EXECUTE
 P | F | * | [COMPILE] LITERAL COMPILE,
 P | T | * | COMPILE,
[] | * | * | COMPILE,
 ' | * | F | \ no action
 ' | * | T | -14 THROW

name format 2:
    compile-xt, hdlr, data ...

 S | I | N | action
 I | * | F | CELL+ EXECUTE
 I | * | T | -14 THROW
 C | * | * | DUP CELL+ SWAP @ EXECUTE
 P | F | F |
 P | F | T |
 P | T | F |
 P | T | T |
[] | F | F |
[] | F | T |
[] | T | F |
[] | T | T |
 ' | F | F | 
 ' | F | T |
 ' | T | F |
 ' | T | T |

echo " S | I | N | action"
for state in ' I' ' C' ' P' '[]' " '"
do
    for interp in F T
    do
	for compile in F T
	do
	    echo "$state | $interp | $compile |"
	done
    done
done

====
\ interpret as for QUIT
: do-interpret ( xt flags -- )
    STATE @ IF
	nf-immediate AND IF EXECUTE ELSE COMPILE, THEN
    ELSE
	nf-nointerp AND IF -14 THROW ELSE EXECUTE THEN
    THEN
;

: do-postpone ( xt flags -- )
    nf-immediate AND IF
	COMPILE,
    ELSE
	[COMPILE] LITERAL [COMPILE] COMPILE,
    THEN
;

: do-[compile] ( xt flags -- ) DROP COMPILE, ;

====
Immediate words:
(                     6.1.0080 CORE                   26
[                     6.1.2500 CORE                   49
.(                    6.2.0200 CORE EXT               51
\                     6.2.2535 CORE EXT               60

Execution semantics only:
>R                    6.1.0580 CORE                   32
EXIT                  6.1.1380 CORE                   39
I                     6.1.1680 CORE                   40
J                     6.1.1730 CORE                   41
LEAVE                 6.1.1760 CORE                   41
R>                    6.1.2060 CORE                   44
R@                    6.1.2070 CORE                   44
UNLOOP                6.1.2380 CORE                   48
2>R                   6.2.0340 CORE EXT               51
2R>                   6.2.0410 CORE EXT               52
2R@                   6.2.0415 CORE EXT               52
COMPILE,              6.2.0945 CORE EXT               54

Separate interpretation and compilation semantics:
TO                    6.2.2295 CORE EXT               59
S"                 11.6.1.2165 FILE                   84

Special compilation semantics:
+LOOP                 6.1.0140 CORE                   27
."                    6.1.0190 CORE                   28
;                     6.1.0460 CORE                   30
ABORT"                6.1.0680 CORE                   32
BEGIN                 6.1.0760 CORE                   34
DO                    6.1.1240 CORE                   37
DOES>                 6.1.1250 CORE                   37
ELSE                  6.1.1310 CORE                   38
IF                    6.1.1700 CORE                   40
LITERAL               6.1.1780 CORE                   42
LOOP                  6.1.1800 CORE                   42
POSTPONE              6.1.2033 CORE                   43
RECURSE               6.1.2120 CORE                   44
REPEAT                6.1.2140 CORE                   45
S"                    6.1.2165 CORE                   45
THEN                  6.1.2270 CORE                   47
UNTIL                 6.1.2390 CORE                   48
WHILE                 6.1.2430 CORE                   49
[']                   6.1.2510 CORE                   50
[CHAR]                6.1.2520 CORE                   50
?DO                   6.2.0620 CORE EXT               53
AGAIN                 6.2.0700 CORE EXT               53
C"                    6.2.0855 CORE EXT               53
CASE                  6.2.0873 CORE EXT               54
ENDCASE               6.2.1342 CORE EXT               54
ENDOF                 6.2.1343 CORE EXT               55
OF                    6.2.1950 CORE EXT               56
[COMPILE]             6.2.2530 CORE EXT               60
