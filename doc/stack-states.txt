0 registers: 1 state -> 1
( ) ( R: )

1 register: 2 states -> 2
( r0 ) ( R: )
( ) ( R: r0 )

2 registers: 6 states -> 4
( r0 r1 ) ( R: )
( r1 r0 ) ( R: )
( r0 ) ( R: r1 )
( r1 ) ( R: r0 )
( ) ( R: r0 r1 ) x
( ) ( R: r1 r0 ) x

3 registers: 24 states - 14 = 10
( r0 r1 r2 ) ( R: )
( r0 r2 r1 ) ( R: )
( r1 r0 r2 ) ( R: )
( r1 r2 r0 ) ( R: )
( r2 r0 r1 ) ( R: )
( r2 r1 r0 ) ( R: )
( r0 r1 ) ( R: r2 )
( r0 r2 ) ( R: r1 )
( r1 r0 ) ( R: r2 )
( r1 r2 ) ( R: r0 )
( r2 r0 ) ( R: r1 )
( r2 r1 ) ( R: r0 )
( r0 ) ( R: r1 r2 ) x
( r0 ) ( R: r2 r1 ) x
( r1 ) ( R: r0 r2 ) x
( r1 ) ( R: r2 r0 ) x
( r2 ) ( R: r0 r1 ) x
( r2 ) ( R: r1 r0 ) x
( ) ( R: r0 r1 r2 ) x
( ) ( R: r0 r2 r1 ) x
( ) ( R: r1 r0 r2 ) x
( ) ( R: r1 r2 r0 ) x
( ) ( R: r2 r0 r1 ) x
( ) ( R: r2 r1 r0 ) x

4 registers: 120 states - 120 = 0
--
0	( ) ( R: )
1	( r0 ) ( R: )
2	( ) ( R: r2 )
3	( r0 r1 ) ( R: )
4	( r1 r0 ) ( R: )
5	( r0 ) ( R: r2 )
6
7	( r0 r1 r2 ) ( R: )
8	( r0 r2 r1 ) ( R: )
9	( r1 r0 r2 ) ( R: )
a	( r1 r2 r0 ) ( R: )
b	( r2 r0 r1 ) ( R: )
c	( r2 r1 r0 ) ( R: )
d	( r0 r1 ) ( R: r2 )
e	( r1 r0 ) ( R: r2 )
f
--

operator types:
  produce:	( -- x )
  binary:	( x1 x2 -- x3 )
  drop:		( x -- )
  swap:		( x1 x2 -- x2 x1 )
  rot:		( x1 x2 x3 -- x2 x3 x1 )
  >R:		( x1 -- ) ( R: -- x1 )
  R>:		( -- x1 ) ( R: x1 -- )

from state 0: ( ) ( R: )
  produce	->		( r0 ) ( R: )
  binary	-> pop		( r0 ) ( R: )
  drop		-> pop 		( ) ( R: )
  swap		-> pop pop	( r0 r1 ) ( R: )
  rot		-> pop pop pop	( r0 r1 r2 ) ( R: )
  >R		-> pop		( ) ( R: r3 )
  R>		-> rpop		( r0 ) ( R: )

from state 1: ( r0 ) ( R: )
  produce	->		( r0 r1 ) ( R: )
  binary	-> pop		( r0 ) ( R: )
  drop		-> 		( ) ( R: )
  swap		-> pop		( r0 r1 ) ( R: )
  rot		-> pop pop	( r1 r0 r2 ) ( R: )
  >R		-> r0>r3	( ) ( R: r3 )
  R>		-> rpop		( r0 r1 ) ( R: )

from state 2: ( ) ( R: r3 )
  produce	->		( r0 ) ( R: r3 )
  binary	-> pop pop	( r0 ) ( R: r3 )
  drop		-> pop		( ) ( R: r3)
  swap		-> pop pop	( r0 r1 ) ( R: r3 )
  rot		-> pop pop pop	( r0 r1 r2 ) ( R: r3 )
  >R		-> rpush pop	( ) ( R: r3 )
  R>		-> r3>r0	( r0 ) ( R: )

from state 3: ( r0 r1 ) ( R: )
  produce	->		( r0 r1 r2 ) ( R: )
  binary	->		( r0 ) ( R: )
  drop		->		( r0 ) ( R: )
  swap		->		( r1 r0 ) ( R: )
  rot		-> pop		( r0 r1 r2 ) ( R: )
  >R		-> r1>r3	( r0 ) ( R: r3 )
  R>		-> rpop		( r0 r1 r2 ) ( R: )

from state 4: ( r1 r0 ) ( R: )
  produce	->		( r1 r0 r2 ) ( R: )
  binary	->		( r0 ) ( R: )
  drop		-> r1>r0	( r0 ) ( R: )
  swap		->		( r0 r1 ) ( R: )
  rot		-> pop		( r1 r0 r2 ) ( R: )
  >R		-> r0>r3 r1>r0	( r0 ) ( R: r3 )
  R>		-> rpop		( r1 r0 r2 ) ( R: )

from state 5: ( r0 ) ( R: r3 )
  produce	->		( r0 r1 ) ( R: r3 )
  binary	-> pop		( r0 ) ( R: r3 )
  drop		->		( ) ( R: r3 )
  swap		-> pop		( r0 r1 ) ( R: r3 )
  rot		-> pop pop	( r0 r1 r2 ) ( R: r3 )
  >R		-> rpush r0>r3	( ) ( R: r3 )
  R>		-> r3>r1	( r0 r1 ) ( R: )

from state 7: ( r0 r1 r2 ) ( R: )
  produce	-> push		( r1 r2 r0 ) ( R: )
  binary	->		( r0 r1 ) ( R: )
  drop		->		( r0 r1 ) ( R: )
  swap		->		( r0 r2 r1 ) ( R: )
  rot		->		( r1 r2 r0 ) ( R: )
  >R		-> r2>r3	( r0 r1 ) ( R: r3 )
  R>		-> push rpop	( r1 r2 r0 ) ( R: )

from state 8: ( r0 r2 r1 ) ( R: )
  produce	-> push		( r2 r1 r0 ) ( R: )
  binary	->		( r0 r1 ) ( R: )
  drop		-> r2>r1	( r0 r1 ) ( R: )
  swap		->		( r0 r1 r2 ) ( R: )
  rot		->		( r2 r1 r0 ) ( R: )
  >R		-> r1>r3 r2>r1	( r0 r1 ) ( R: r3 )
  R>		-> push rpop	( r2 r1 r0 ) ( R: )

from state 9: ( r1 r0 r2 ) ( R: )
  produce	-> push		( r0 r2 r1 ) ( R: )
  binary	->		( r1 r0 ) ( R: )
  drop		->		( r1 r0 ) ( R: )
  swap		->		( r1 r2 r0 ) ( R: )
  rot		->		( r0 r2 r1 ) ( R: )
  >R		-> r2>r3	( r1 r0 ) ( R: r3 )
  R>		-> push rpop	( r0 r2 r1 ) ( R: )

from state a: ( r1 r2 r0 ) ( R: )
  produce	-> push		( r2 r0 r1 ) ( R: )
  binary	->		( r1 r0 ) ( R: )
  drop		-> r2>r0	( r1 r0 ) ( R: )
  swap		->		( r1 r0 r2 ) ( R: )
  rot		->		( r2 r0 r1 ) ( R: )
  >R		-> r0>r3 r2>r0	( r1 r0 ) ( R: r3 )
  R>		-> push rpop	( r2 r0 r1 ) ( R: )

from state b: ( r2 r0 r1 ) ( R: )
  produce	-> push		( r0 r1 r2 ) ( R: )
  binary	-> r2>r0	( r0 r1 ) ( R: )
  drop		-> r2>r1	( r0 r1 ) ( R: )
  swap		->		( r2 r1 r0 ) ( R: )
  rot		->		( r0 r1 r2 ) ( R: )
  >R		-> r1>r3 r2>r1	( r1 r0 ) ( R: r3 )
  R>		-> push rpop	( r0 r1 r2 ) ( R: )

from state c: ( r2 r1 r0 ) ( R: )
  produce	-> push		( r1 r0 r2 ) ( R: )
  binary	-> r2>r0	( r0 r1 ) ( R: )
  drop		-> r2>r0	( r0 r1 ) ( R: )
  swap		->		( r2 r0 r1 ) ( R: )
  rot		->		( r1 r0 r2 ) ( R: )
  >R		-> r0>r3 r2>r0	( r0 r1 ) ( R: r3 )
  R>		-> push rpop	( r1 r0 r2 ) ( R: )

from state d: ( r0 r1 ) ( R: r3 )
  produce	->		( r0 r1 r2 ) ( R: r3 )
  binary	->		( r0 ) ( R: r3 )
  drop		->		( r0 ) ( R: r3 )
  swap		->		( r1 r0 ) ( R: r3 )
  rot		-> pop		( r0 r1 r2 ) ( R: r3 )
  >R		-> rpush r1>r3	( r0 ) ( R: r3 )
  R>		-> r3>r2	( r0 r1 r2 ) ( R: )

from state e: ( r1 r0 ) ( R: r3 )
  produce	->		( r1 r0 r2 ) ( R: r3 )
  binary	->		( r0 ) ( R: r3 )
  drop		-> r1>r0	( r0 ) ( R: r3 )
  swap		->		( r0 r1 ) ( R: r3 )
  rot		-> pop		( r1 r0 r2 ) ( R: r3 )
  >R		-> r0>r3 r1>r0	( r0 ) ( R: r3 )
  R>		-> r3>r2	( r1 r0 r2 ) ( R: )
