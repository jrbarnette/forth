Goal is to compile Forth sources into some target output
language.  Operation has to be in two modes:
    Forth (interpret and compile)
    Target (interpret and compile)
... or count it as four modes...

in target mode interpretation state, these words must be redefined
to operate on the target dictionary:
    HERE ALLOT , C, ALIGN UNUSED
    : VARIABLE CONSTANT CREATE
    ' FIND
    IMMEDIATE

Some words should operate using target execution rules:
    >BODY EXECUTE
	(>BODY should work, EXECUTE, ... well ... )
    CELL+ CELLS @ ! C@ C! MOVE
    etc.
	(depends on cell size)
	( ... or character set (!))
	( ... or endianness)
Need an escape to allow switching back to host primitives.

target search order has just the special compilation semantics
words from the standard
    POSTPONE ['] [CHAR] [COMPILE]
    LITERAL
    RECURSE
    S" C" ." ABORT"
    [ ; DOES>
    IF ELSE THEN
    BEGIN WHILE REPEAT UNTIL AGAIN
    DO ?DO LOOP +LOOP UNLOOP LEAVE I J

omit these for now
    CASE ENDCASE ENDOF OF
    TO

Some words can be inherited from the standard Forth interpreter:
    \ ( .(

in target mode compilation state, we must interpret the source for
ourselves:
    parse-word and lookup in target search order
    if found
	execute
    else
	lookup in target dictionary
	if found
	    compile into target dictionary
	else if parse number
	    compile literal into target dictionary
	else
	    complain (game over)
Rationale:  LITERAL is the problem.  If we see a literal number,
we must compile it into the target dictionary, and the standard
QUIT loop that we inherit can't do that.

These words switch mode from target compilation state to
target interpretation:
    [ ;
These words switch mode to target compilation state
    : ]

target mode compilation must be in a loop, needs an exit condition:
    while TARGET-STATE
	handle one word, as above
	\ need to handle REFILL
... is this so?  Maybe we have a custom QUIT loop that does
a different kind of interpretation.

options
  * custom target compiler loop handles target interpretation and
    compilation - escape by calling QUIT
  * custom compiler loop only; interpretation is handled by custom
    vocabulary - escape by setting a global, or by QUIT

Have to go with custom loop for the compiler only:
... top-level 'forth' command calls quit() in C for each file
    ... so: must exit compilation state before EOF
	on pain of fiery death
    ... nice to have compilation state throw an error at EOF
	    -39 THROW
    ... the interpreter will remember the vocabulary settings
	from file to file

=== alternatives considered to a target-mode compile state loop
  + separate interpreter loop in target mode
    ... but currently, we operate by parsing files named on the
	command line, and each file starts at the high-level
	interpreter
    ... something has to change; maybe time to implement
	INCLUDED, INCLUDE-FILE, etc.?
    ... wait, target-mode is triggered by content in the
	source file, like a : definition
    ... target-mode loop just has to handle EOF properly
    ... more to the point, terminate properly after ;
  + teach the top level interpreter to search the target
    dictionary?
    ... give every wordlist its own embedded search method
    ... need to be careful that IMMEDIATE target words
	are properly shadowed by host-mode words that do
	the right thing
    ... doesn't handle compiling literals to target
  + for each target definition, create a host definition
    with the needed behavior
    ... IMMEDIATE gets sticky; consider definition of IF
    ... doesn't handle compiling literals to target

considering IF when host-mode has a shadow dictionary for
target-mode
: IF ( C: -- orig ) postpone fskip orig> ; immediate
    ... in target, this compiles in, and gets marked IMMEDIATE
	(provided fskip and orig> are OK?); all good
    ... in host-mode IF becomes
	    ' IF label,
	but in host-mode, IF should do the same as the target

compile-only words
    need a host-mode definition that shadows and mocks the
    target-mode definition
    ... ideally, just source the code twice, once in host-mode, once
	in target-mode
